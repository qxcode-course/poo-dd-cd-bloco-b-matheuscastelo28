{
    "patches": [
        {
            "label": "2025-10-07_16-46-21",
            "content": "@@ -715,17 +715,16 @@\n _(self):\n- \n %0A#      \n@@ -1470,17 +1470,17 @@\n %0A%0Aclass \n-C\n+c\n hinela:%0A\n@@ -1522,33 +1522,32 @@\n :%0A        self._\n-_\n tamanho = 0%0A    \n@@ -1580,24 +1580,80 @@\n o)%0A        %0A\n+    def getTamanho(self):%0A        return self.__tamanho%0A\n     %0A    def\n@@ -1689,12 +1689,12 @@\n  -%3E \n-bool\n+None\n :%0A  \n@@ -1712,18 +1712,19 @@\n lor %3E20 \n-or\n+and\n  valor %3C\n@@ -1819,37 +1819,32 @@\n          return \n-False\n %0A        if valo\n@@ -1839,21 +1839,30 @@\n      if \n-valor\n+self.__tamanho\n  %25 2 !=0\n@@ -1941,14 +1941,8 @@\n turn\n- False\n %0A   \n@@ -1967,334 +1967,15 @@\n o = \n-valor %0A        return True%0A        %0A        %0A    def  getTamanho(self)-%3E int:%0A        return self.__tamanho%0A%0A        %0Adef main():%0A    chinela = Chinela()%0A    while True:%0A        numero: int = int(input(%22Qual o tamanho da chinela que voc%C3%AA quer%22))%0A        if  chinela.setTamanho(numero) == True:%0A            break%0Amain()%0A       \n+tamanho\n  %0A  \n",
            "lines": "57"
        },
        {
            "label": "2025-10-20_16-49-24",
            "content": "# c\u00f3digo do Tempo\n# 1. usar o __ no come\u00e7o pra definir private\n# 2. criar um get_algo para leitura e retornar o valor\n# 3. criar um set_algo que recebe um valor\n# 4. parametros default utilizados quando o valor n\u00e3o vem\n# 5. parametros nomeados quando quero um valor especifico\n\n# class Tempo:\n#     def __init__(self, hora: int = 0, min: int = 0):\n#         self.__h = 0\n#         self.set_hora(hora)\n#         self.__m = min\n#         self.__s = 0\n\n#     def set_hora(self, valor: int) -> None: # escrita\n#         if valor > 11 or valor < 0:\n#             print(\"hora errada\")\n#             return\n#         self.__h = valor\n\n#     def get_hora(self) -> int: # leitura\n#         return self.__h\n\n#     def __str__(self): \n#         return f\"{self.__h}:{self.__m}:{self.__s}\"\n\n# agora = Tempo(min=55, hora=9)\n# print(agora)\n\n\n# Vamos implementar uma classe que controla os poss\u00edveis valores de cal\u00e7ados para uma chinela.\n# As regras de valida\u00e7\u00e3o de valores s\u00e3o as seguintes.\n# Uma chinela tem um valor tamanho que \u00e9 um n\u00famero par entre 20 e 50, incluindo 20 e 50.\n# Fa\u00e7a o objeto chinela iniciar com tamanho 0 e controle atrav\u00e9s do m\u00e9todo setTamanho que apenas valores v\u00e1lidos de tamanho sejam atribu\u00eddos.\n# Por fim, crie um loop no qual um objeto chinela \u00e9 criado e \u00e9 perguntado ao usu\u00e1rio qual seu tamanho de chinela.\n# Mantenha o usu\u00e1rio preso no loop at\u00e9 que ele insira um valor v\u00e1lido.\n# Caso ele digite um valor inv\u00e1lido, avise e d\u00ea uma mensagem de erro adequada.\n\nclass Chinela:\n    def __init__(self, tamanho:int):\n        self.__tamanho = 0\n        self.setTamanho(tamanho)\n        \n    \n    def setTamanho(self, valor: int) -> bool:\n        if valor >20 or valor <50:\n            print(f\" Este tamanho \u00e9 invalido, deve ser um numero entre 20 e 50\")\n            return False\n        if valor % 2 !=0:  \n            print(f\"fail, precisa ser um numero par\")\n            return False\n        self.__tamanho = valor \n        return True\n        \n        \n    def  getTamanho(self)-> int:\n        return self.__tamanho\n\n        \ndef main():\n    chinela = Chinela()\n    while True:\n        numero: int = int(input(\"Qual o tamanho da chinela que voc\u00ea quer\"))\n        if  chinela.setTamanho(numero) == True:\n            break\nmain()\n        \n        \n        \n            ",
            "lines": "70"
        }
    ]
}